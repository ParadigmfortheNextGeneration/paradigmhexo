

'use strict';

var nunjucks = require('nunjucks');
var env = new nunjucks.Environment();
var pathFn = require('path');
var fs = require('fs');
var moment = require('moment');

env.addFilter('uriencode', function(str) {
  return encodeURI(str);
});

var atomTmplSrc = pathFn.join(__dirname, '../atom.xml');
var atomTmpl = nunjucks.compile(fs.readFileSync(atomTmplSrc, 'utf8'), env);
var rss2TmplSrc = pathFn.join(__dirname, '../rss2.xml');
var rss2Tmpl = nunjucks.compile(fs.readFileSync(rss2TmplSrc, 'utf8'), env);

module.exports = function(locals) {
  var config = this.config;
  var feedConfig = config.feed;
  var template = feedConfig.type === 'rss2' ? rss2Tmpl : atomTmpl;
  
  //console.log(locals.posts.data[0]['updated']);
  
  for (var i = 0; i < locals.posts.data.length; i++) {
    var item = locals.posts.data[i];
    if (locals.posts.data[i].push_update == true) {
       locals.posts.data[i].push_date = locals.posts.data[i].updated;
       locals.posts.data[i].uuid = locals.posts.data[i].uuid +'-'+ locals.posts.data[i].push_date.toDate().getTime()
    }
    else {
      locals.posts.data[i].push_date = locals.posts.data[i].date;
    }
  };
  var posts = locals.posts.sort('-push_date');
  if (feedConfig.limit) posts = posts.limit(feedConfig.limit);
  
  // Hide posts that we don't want  in the feed.
  var remove_indexes = []
  posts.forEach(function(post, index){
    if (post.hide_from_feed == true) {
      remove_indexes.push(index);
    }
  })
  while(remove_indexes.length) {
    posts.data.splice(remove_indexes.pop(), 1);
  }

  if (config.rss_push_title) {
    if (config.rss_push_updated) {
      var updated = config.rss_push_updated;
    }
    else {
      var updated = config.rss_push_date;
    }
    var push_item_date = moment(new Date(config.rss_push_date))
    var push_item_updated = moment(new Date(updated))
    
    var push_item = {
      title: config.rss_push_title,
      description: config.rss_push_description,
      date: push_item_date,
      updated: push_item_updated,
      uuid: config.rss_push_uuid,
      feed_link: config.rss_push_link
    };
    posts.data.unshift(push_item);    
  }
  var url = config.url;
  if (url[url.length - 1] !== '/') url += '/';

  var xml = template.render({
    config: config,
    url: url,
    posts: posts,
    feed_url: url + feedConfig.path
  });

  return {
    path: feedConfig.path,
    data: xml
  };
};
